- name: Check datagrid pod status
  k8s_facts:
    kind: Pod
    namespace: "{{ namespace }}"
    label_selectors: "application=datagrid-service"
    field_selectors: 
    - status.phase=Running
  register: pod
  until : >-
       pod.resources|default([])|length == num_dg_instances and
       pod | json_query('resources[*].status.containerStatuses[*].ready') | flatten |difference( [true] ) | length  == 0
  retries: 40

- name: Get hotrod client route
  k8s_facts:
    kind: Route
    namespace: "{{ namespace }}"
    label_selectors: "application=hotrod-client"
  register: hotrod_route
  until: hotrod_route.resources|length > 0

- name: Get datagrid service route
  k8s_facts:
    kind: Route
    namespace: "{{ namespace }}"
    label_selectors: "application=datagrid-service"
  register: dg_route
  until: dg_route.resources|length > 0

# A cronjob can always insert any data, so we cannot be sure that this is the real data befor migration
# because we cannot check the source cluster. Nevertheless, even if not accurate, this information should
# be there in the cache. If not, then there was a problem with the volumes migration.
- name: Retrieve the data inserted before the migration from rest api (cron inserted data)
  uri:
    url:  https://{{ dg_route.resources[0].spec.host }}/rest/{{ rest_cache_name }}
    return_content: yes
    validate_certs: false
    user: "{{ app_user }}"
    password: "{{ app_password }}"
    force_basic_auth: yes
  register: rest_rsp
  until: rest_rsp.status == 200

- name: Check hotrod client pod status
  k8s_facts:
    kind: Pod
    namespace: "{{ namespace }}"
    label_selectors: "application=hotrod-client"
    field_selectors: 
    - status.phase=Running
  register: pod
  until : >-
       pod.resources|default([])|length > 0 and
       pod | json_query('resources[*].status.containerStatuses[*].ready') | flatten |difference( [true] ) | length  == 0
  retries: 20
  delay: 20

- name: Check cronjob status
  k8s_facts:
    kind: Pod
    namespace: "{{ namespace }}"
    label_selectors: "application={{ cron_name }}"
    field_selectors:  
    - status.phase=Succeeded 
  register: pod
  until: pod.resources | length > 0
  retries: 30

- name: Retrieve the data inserted before the migration in the hotrod cache
  uri:
    url:  http://{{ hotrod_route.resources[0].spec.host }}/datagridclient/show
    return_content: yes
    method: POST
    body_format: form-urlencoded
    body:
      cache: "{{ hotrod_cache_name }}"
  register: hotrod_rsp
  until: hotrod_rsp.status == 200

# The data inserted is retreived from the cache with this format
# key-{{ index }} : datavalue-{{ index }}
# like "key-0 : datavalue-0\nkey-1 : datavalue-1\n----"
- name: Verify hotrod inserted data
  fail:
     msg: The data inserted before the migration cannot be found in hotrod cache
  when: not hotrod_rsp.content is search( "key-" + index|string + " . datavalue-" + index|string )
  loop: "{{ range(0, 9)|list }}"
  loop_control:
    index_var: index

- name: Verify rest inserted data
  fail:
     msg: The data inserted before the migration cannot be found in rest cache
  when: rest_rsp.content.splitlines()|length == 0

- name: Insert again new data in the hotrod cache after the migration
  uri:
    url:  http://{{ hotrod_route.resources[0].spec.host }}/datagridclient/insert 
    method: POST
    body_format: form-urlencoded
    body:
      cache: "{{ hotrod_cache_name }}"
      key: "key-{{ item }}"
      data: "datavalue-{{ item }}"
  register: insert_rsp
  until: insert_rsp.status == 200
  loop: "{{ range(10, 20)|list }}"
  loop_control:
    label: "Inserted -> key-{{ item }} : datavalue-{{ item }}"

- name: Retrieve the data inserted after the migration in the hotrod cache
  uri:
    url:  http://{{ hotrod_route.resources[0].spec.host }}/datagridclient/show
    return_content: yes
    method: POST
    body_format: form-urlencoded
    body:
      cache: "{{ hotrod_cache_name }}"
  register: hotrod_rsp_after
  until: hotrod_rsp_after.status == 200


- name: Verify total hotrod inserted data
  fail:
     msg: The data inserted after the migration cannot be found in hotrod cache
  when: not hotrod_rsp_after.content is search( "key-" + item|string + " . datavalue-" + item|string )
  loop: "{{ range(0, 20)|list }}"

- pause:
    prompt: Wait 1 minute to make sure that at least one cronjob has inserted data in the rest cache
    minutes: 1

- name: Retrieve the data stored in the rest cache (cron inserted data)
  uri:
    url:  https://{{ dg_route.resources[0].spec.host }}/rest/{{ rest_cache_name }}
    return_content: yes
    validate_certs: false
    user: "{{ app_user }}"
    password: "{{ app_password }}"
    force_basic_auth: yes
  register: rest_rsp_after
  until: rest_rsp_after.status == 200

- name: Data inserted by cronjobs before migration
  debug: msg={{ rest_rsp.content.splitlines() }}

- name: Total data inserted by crojobs
  debug: msg={{ rest_rsp_after.content.splitlines() }}

- name: Verify total rest inserted data
  fail:
     msg: Data is not being inserted in the rest cache by the cronjobs. Rest cache content should be growing
  when: rest_rsp.content.splitlines()|length >= rest_rsp_after.content.splitlines()|length
